%% ****************************************************************
%
%           Description : display dynamic signals resulting from simulation
%
%           Author : G.M. Hoang
%
%           Rev. 0 : baseline
%
%           Inputs : 
%                       - Signals : struct containing simulation signals
%                       - Display : struct containgin display options
%           Outputs : 
%                       - none
%
% *************************************************************************

function display = ZEN_displayDynamicSignals(signals, results, display)

% position error in Cartersian
if display.position_error
    figure
    hold on
    set(gca, 'fontSize', display.fontSize)
    for i = 1:2
        plot(signals.t, results.position(i,:) - signals.position(i,:),...
            'lineStyle', display.lineStyleError,...
            'lineWidth', display.lineWidthError,...
            'marker', display.markerStyleError,...
            'markerSize', display.markerSizeError,...
            'color', display.colors(i,:))
    end
    
    if display.std
        for i = 1:2
            plot(signals.t, results.position_std(i,:),...
                'lineStyle', display.lineStyleStd,...
                'lineWidth', display.lineWidthStd,...
                'marker', display.markerStyleStd,...
                'markerSize', display.markerSizeStd,...
                'color', display.colors(i,:))
            plot(signals.t, -results.position_std(i,:),...
                'lineStyle', display.lineStyleStd,...
                'lineWidth', display.lineWidthStd,...
                'marker', display.markerStyleStd,...
                'markerSize', display.markerSizeStd,...
                'color', display.colors(i,:))
        end
    end
    
    legend('x','y')
    xlabel('time (s)')
    ylabel('error (m)')
    title('Position error')

end

% velocity error in Cartersian
if display.velocity_error
    figure
    hold on
    set(gca, 'fontSize', display.fontSize)
    for i = 1:2
        plot(signals.t, results.velocity(i,:) - signals.velocity(i,:),...
            'lineStyle', display.lineStyleError,...
            'lineWidth', display.lineWidthError,...
            'marker', display.markerStyleError,...
            'markerSize', display.markerSizeError,...
            'color', display.colors(i,:))
    end
    
    if display.std
        for i = 1:2
            plot(signals.t, results.velocity_std(i,:),...
                'lineStyle', display.lineStyleStd,...
                'lineWidth', display.lineWidthStd,...
                'marker', display.markerStyleStd,...
                'markerSize', display.markerSizeStd,...
                'color', display.colors(i,:))
            plot(signals.t, -results.velocity_std(i,:),...
                'lineStyle', display.lineStyleStd,...
                'lineWidth', display.lineWidthStd,...
                'marker', display.markerStyleStd,...
                'markerSize', display.markerSizeStd,...
                'color', display.colors(i,:))
        end
    end
    
    legend('v_x','v_y')
    xlabel('time (s)')
    ylabel('error (m/s)')
    title('Velocity error')

end

